//     ========     Fungsi Hapus Data Menggunakan Filter Kategori , Jumlah Halaman , Harga ,Tahun Terbit Digital replace data    ========
  function FungsiHapusDataDenganKriteria() {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getActiveSheet();
    const name = sheet.getName();
    const namaPenerbit = name.replace(/^\d+\.\s*/, "").trim();
    const skipSheets = ['Form Pengadaan', 'Hasil Seleksi', 'Referensi', 'DaftarISBN', 'DaftarUUID'];

    // Lewati jika termasuk sheet yang di-skip
    if (skipSheets.includes(name)) {
      Logger.log("‚è≠ Melewati sheet: " + name);
      return;
    }

    Logger.log("üîç Memproses sheet: " + name);

    // Konfigurasi filter
    const filterOptions = {
      kodeRef: { aktif: true, nilaiDiperbolehkan: ['009.03'] },
      tahun: { aktif: false, min: 2021, max: 2025 },
      halaman: { aktif: false, min: 151, max: 2025 },
      harga: { aktif: false, min: 14800, max: 2025 }
    };

    const startRow = 10;
    const headerRow = 9;
    const lastRow = sheet.getLastRow();
    const lastCol = sheet.getLastColumn();

    if (lastRow < startRow) {
      Logger.log("‚ÑπÔ∏è Tidak ada data yang diproses.");
      return;
    }

    // Ambil header & data
    const headers = sheet.getRange(headerRow, 1, 1, lastCol)
      .getValues()[0]
      .map(h => String(h).trim().toLowerCase());
    const data = sheet.getRange(startRow, 1, lastRow - startRow + 1, lastCol).getValues();

    // Index kolom
    const getIndex = (colName) => headers.indexOf(colName.toLowerCase());
    const idx = {
      kodeRef: getIndex("kode referensi"),
      tahun: getIndex("tahun terbit digital*"),
      halaman: getIndex("jumlah halaman*"),
      harga: getIndex("harga satuan")
    };

    // Fungsi pengecekan baris lolos filter
    const isLolosFilter = (row) => {
      if (filterOptions.kodeRef.aktif && idx.kodeRef !== -1) {
        const val = String(row[idx.kodeRef]).trim();
        if (!filterOptions.kodeRef.nilaiDiperbolehkan.includes(val)) return false;
      }
      if (filterOptions.tahun.aktif && idx.tahun !== -1) {
        const val = Number(row[idx.tahun]);
        if (isNaN(val) || val < filterOptions.tahun.min || val > filterOptions.tahun.max) return false;
      }
      if (filterOptions.halaman.aktif && idx.halaman !== -1) {
        const val = Number(row[idx.halaman]);
        if (isNaN(val) || val < filterOptions.halaman.min || val > filterOptions.halaman.max) return false;
      }
      if (filterOptions.harga.aktif && idx.harga !== -1) {
        const val = Number(row[idx.harga]);
        if (isNaN(val) || val < filterOptions.harga.min || val > filterOptions.harga.max) return false;
      }
      return true;
    };

    // Filter data
    const dataLolos = data.filter(isLolosFilter);

    // Jika semua baris gagal ‚Üí hapus sheet
    if (dataLolos.length === 0) {
      const allSheets = ss.getSheets();
      if (allSheets.length > 1) {
        Logger.log("üóë Semua data tidak memenuhi syarat. Menghapus sheet: " + name);
        ModulHapusBarisDariHasilSeleksi(namaPenerbit);
        ss.deleteSheet(sheet);
      } else {
        Logger.log("‚ö†Ô∏è Tidak bisa menghapus sheet karena hanya ada satu sheet.");
      }
      return;
    }

    // Kosongkan isi data lama
    sheet.getRange(startRow, 1, lastRow - startRow + 1, lastCol).clearContent();

    // Tulis ulang data yang lolos
    sheet.getRange(startRow, 1, dataLolos.length, lastCol).setValues(dataLolos);

    // Bersihkan baris kosong & format di bawah data
    const lastDataRow = startRow + dataLolos.length - 1;
    if (lastDataRow < sheet.getMaxRows()) {
      const rangeToClear = sheet.getRange(lastDataRow + 1, 1, sheet.getMaxRows() - lastDataRow, lastCol);
      rangeToClear.clear({ contentsOnly: false }).setBorder(false, false, false, false, false, false);
      Logger.log(`üßπ Menghapus format & isi dari ${sheet.getMaxRows() - lastDataRow} baris di bawah data.`);
    }

    // Update tampilan sheet
    FungsiTampilanSheetPenerbit();
    Logger.log(`‚úÖ Selesai. Dihapus ${data.length - dataLolos.length} baris, tersisa ${dataLolos.length}.`);
  }

  function ModulHapusBarisDariHasilSeleksi(namaPenerbit) {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Hasil Seleksi");
    const data = sheet.getDataRange().getValues();

    const barisUntukHapus = [];

    for (let i = 0; i < data.length; i++) {
      const nama = String(data[i][1] || "").replace(/^\d+\.\s*/, "").trim();
      if (nama.toLowerCase() === namaPenerbit.toLowerCase()) {
        barisUntukHapus.push(i + 1);
      }
    }

    barisUntukHapus.reverse().forEach(row => sheet.deleteRow(row));
  }
//     ========     Fungsi Hapus Data Menggunakan Filter Kategori , Jumlah Halaman , Harga ,Tahun Terbit Digital replace data    ========

//     ========     Fungsi Hapus Data Menggunakan Filter Kategori , Jumlah Halaman , Harga ,Tahun Terbit Digital replace data semua Sheet    ========
  function FungsiHapusDataDenganKriteriaALLSHEET() {
    const spreadsheet = SpreadsheetApp.getActive();
    const semuaSheet = spreadsheet.getSheets();
    //PERLU DIRUBAH ==============================================================================
    const sheetmulai = 0; // Masukan Nomor Sheet awal
    //PERLU DIRUBAH ==============================================================================
    const mulai = sheetmulai + 2;
    const sheetDikecualikan = ['Form Pengadaan', 'Hasil Seleksi', 'Referensi', 'DaftarISBN', 'DaftarUUID'];

    if (mulai < 0 || mulai >= semuaSheet.length) {
      Logger.log("Nomor sheet tidak valid.");
      return;
    }
    semuaSheet.slice(mulai).forEach(sheet => {
      const namaSheet = sheet.getName();
      if (sheetDikecualikan.includes(namaSheet)) return;
      spreadsheet.setActiveSheet(sheet);
      FungsiHapusDataDenganKriteria();
    });
  }

//     ========     Fungsi Hapus Data Menggunakan Filter Kategori , Jumlah Halaman , Harga ,Tahun Terbit Digital replace data semua Sheet    ========


